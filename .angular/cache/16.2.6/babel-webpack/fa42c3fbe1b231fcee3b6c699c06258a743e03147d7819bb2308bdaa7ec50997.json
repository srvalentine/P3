{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Duoc/Desktop/master/carlos_rama/P3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/storage-angular\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(storage) {\n      this.storage = storage;\n      this.users = [];\n      this.isAuthenticated = false;\n    }\n    cargarUsuariosStorage() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const usuariosGuardados = yield _this.storage.get('usuariosRegistrados');\n        if (usuariosGuardados) {\n          _this.users = usuariosGuardados;\n        }\n      })();\n    }\n    registro(username, password, name, lname, rut, car, region, comuna) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        yield _this2.storage.create();\n        const usuarioExistente = _this2.users.find(user => user.username === username);\n        if (usuarioExistente) {\n          console.log(\"Este usuario ya existe\");\n          return false;\n        }\n        const usuarioReg = {\n          username,\n          password,\n          name,\n          lname,\n          rut,\n          car,\n          region,\n          comuna\n        };\n        _this2.users.push(usuarioReg);\n        yield _this2.storage.set('usuariosRegistrados', _this2.users);\n        yield _this2.storage.set('usuarioLogg', usuarioReg);\n        return true;\n      })();\n    }\n    login(username, password) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const user = _this3.users.find(u => u.username === username && u.password === password);\n        if (user) {\n          _this3.isAuthenticated = true;\n          yield _this3.storage.set('usuarioLogg', user);\n          return true;\n        }\n        console.log(\"No se encuentra el usuario\");\n        return false;\n      })();\n    }\n    isLoggedIn() {\n      return this.isAuthenticated;\n    }\n    logout() {\n      this.isAuthenticated = false;\n    }\n    getLoggedInUser() {\n      return this.isAuthenticated;\n    }\n    restaurarpass(username, npass) {\n      const buscarUsuario = this.users.findIndex(user => user.username === username);\n      if (buscarUsuario !== -1) {\n        this.users[buscarUsuario].password = npass;\n        this.storage.set('usuariosRegistrados', this.users);\n        return true;\n      }\n      console.log(\"No se a encontrado el usuario\");\n      return false;\n    }\n    isAuthenticatedUser() {\n      return this.isAuthenticated;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Storage));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}